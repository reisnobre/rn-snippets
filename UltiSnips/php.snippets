snippet rnd:model "Model documentation" b
/**
 * Short description for a Laravel Model
 *
 * @method Builder find
 * @method Builder findOrFail
 * @method Builder where
 * @method Builder whereDate
 * @method Builder whereHas
 *
 * @link
 * @version    
 */ 
endsnippet

snippet rnd:function "Function documentation" b
/**
 * Does something interesting
 *
 * @param Place   $where  Where something interesting takes place
 * @param integer $repeat How many times something interesting should happen
 * 
 * @throws Some_Exception_Class If something interesting cannot happen
 * @author Eduardo Reis Nobre <eduardo.reisnobre@gmail.com>
 * @return Status
 */ 
endsnippet

snippet rnd:relation "Relationship documentation" b
/**
 * Relation description 
 *
 * @author Eduardo Reis Nobre <eduardo.reisnobre@gmail.com>
 * @return Relation 
 */ 
endsnippet

snippet rn:relation:hasOne "HasOne Relationship" b
public function $1()
{
	return $this->hasOne($2::class);
}
endsnippet

snippet rn:relation:hasMany "HasMany Relationship" b
public function $1()
{
	return $this->hasMany($2::class);
}
endsnippet

snippet rn:relation:belongsTo "BelongsTo Relationship" b
public function $1()
{
	return $this->belongsTo($2::class);
}
endsnippet

snippet rn:sw:post:public-method "Laravel Method using Swagger documentation" b
/**
 *	$1`
<<<<<<< HEAD
arguments = [argument.strip()  for argument in t[2].split(',') if argument]
=======
arguments = [argument.strip()  for argument in t[3].split(',') if argument]
>>>>>>> 8c2e2af9da01cd9cf30b17fba409c13533abc245
if len(arguments):
	tags = map(param, arguments)
	for tag in tags:
		snip += tag
`
 * 	@return ${4:Return} 
 *
 *	@OA\Post(
 * 		path="/api/v1/${5}",
 *     	operationId="login",
 *     	tags={"User authentication"},
 *     	summary="Login",
 *     	description="",
 *     	@OA\Parameter(
 *      	name="email",
 *         	in="query",
 *         	required=true,
 *         	@OA\Schema(type="string")
 *     	),
 *     	@OA\Response(
 *       	response=200,
 *         	description="Successful operation",
 *         	x={
 *          	"X__test__Cases": {
 *              	{
 *                  	"schemaRequest":"AuthLoginRequest",
 *                     	"schemaResponse":"AuthLogin",
 *                     	"authToken":"authSupplier1",
 *                     	"description":"Login - Test a client login",
 *                 	}
 *             	}
 *         	}
 *     	),
 *     	@OA\Response(
 *      	response=422,
 *         	description="Unprocessable entity"
 *     	),
 *     	@OA\Response(
 *         	response=404,
 *          description="Not Found",
 *          x={
 *             	"testCases": {
 *              	{
 *                  	"schemaRequest":"AuthLoginRequest",
 *                      "schemaResponse":"AuthLogin",
 *                      "description":"Login - Test a failed client login",
 *                      "parametersRequest": {
 *                      	"email":"test_user+test_client_that_must_fail@randomdomain.com",
 *                          "password":"incorrect-password-123",
 *                      }
 *                  }
 *              }
 *      	},
 *  	),
 * 	)
 */
public function ${1:Function Name}(${2:params})
{
	${6}
}
endsnippet
