extends vuex, jsdocs

global !p
def param(argument):
	return " * @param {{}} {0}".format(argument)

def function_name(name):
	return name

endglobal


snippet rnc:method "Method" b
`!p

arguments = [argument.strip()  for argumen in t[2].split(',') if argument]

if len(arguments):
	tags = map(param, arguments)
	snip.rv = "/**"
	for tag in tags:
		snip += tag
	snip += '* @public'
	snip += ' */'
	snip += ''
else:
	snip.rv = ''
`
/**
* $1
*
* ${2:Description}
/*
${1} (${2}) {
	${0:${VISUAL}}
},
endsnippet

snippet rn:import "Import a module" b
import $1 from '$2'
endsnippet

snippet rn:decomposed-import "Import a docomposed module" b
import { $1 } from '$2'
endsnippet

snippet rn:log "console.log(...)" b
console.log($0)
endsnippet


snippet rntm "timeout" b
setTimeout(() => {
	$0
}, 300)
endsnippet


snippet rnc:mvue "Main Vue File" b
import Vue from 'vue'
import App from './App.vue'
import router from './router'
import store from './store'

import './registerServiceWorker'

// import { api } from './config'

Vue.config.productionTip = false
// Vue.prototype.$api = api // Setting the default communication function

new Vue({
  router,
  store,
  render: h => h(App)
}).$mount('#app')
endsnippet

snippet rnc:router "Router File" b
import Vue from 'vue'
import Router from 'vue-router'
Vue.use(Router)

import ${1} from `!p snip.rv = t[1].lower()`

export default new Router({
	mode: 'history',
  base: process.env.NODE_ENV === 'production' ? '/' : '/',
  routes: [
    {
      path: '',
      name: '`!p snip.rv = t[1].lower()`',
      component: ${0}
    }
  ]
})
endsnippet

snippet rnc:debounced:watch "Debounced watch propertie" b
$1: _.debounce(function ($2) {
}, $3)
endsnippet

snippet rnc:debounced:store:computed "Debounced computed propertie" b
$1: {
	get () {
		return this.$store.getters.$2
	},
	set: _.debounce(function ($3) {
	}, $4)
},
endsnippet

snippet rn:test "Test snippet" b
import ${1} from `!p snip.rv = t[1].lower()`
endsnippet
