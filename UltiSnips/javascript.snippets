snippet rnlog "console.log(...)" b
console.log($0)
endsnippet

snippet rntm "timeout" b
setTimeout(() => {
	$0
}, 300)
endsnippet

snippet rnc:mvue "Main Vue File" b
import Vue from 'vue'
import App from './App.vue'
import router from './router'
import store from './store'

import './registerServiceWorker'

// import { api } from './config'

Vue.config.productionTip = false
// Vue.prototype.$api = api // Setting the default communication function

new Vue({
  router,
  store,
  render: h => h(App)
}).$mount('#app')
endsnippet

snippet rnc:router "Router File" b
import Vue from 'vue'
import Router from 'vue-router'
Vue.use(Router)

import $0 from `!p snip.rv = t[1].lower()`

export default new Router({
	mode: 'history',
  base: process.env.NODE_ENV === 'production' ? '/' : '/',
  routes: [
    {
      path: '',
      name: '`!p snip.rv = t[0].lower()`',
      component: $0
    }
  ]
})
endsnippet

snippet rnc:store "Store File" b
import Vue from 'vue'
import Vuex from 'vuex'
Vue.use(Vuex)

const debug = process.env.NODE_ENV !== 'production'
import $0 from './stores/$0' 

export default new Vuex.store({
  strict: debug,
  modules: {
    $0
  }
})
endsnippet


snippet rnc:store:module "Store module" b
const state = {
  state: 'value'
}

const getters = {
  state: () => state.state
}
const mutations = {
  SET_STATE (state, value) {
  state.state = value
  }
}

const actions = {
  setState ({ commit }, value) {
    commit('SET_STATE', value)
  }
}

export default {
  namespaced: true,
  state,
  getters,
  mutations,
  actions
}
endsnippet

snippet rnc:store:nmodule "Store namespaced module" b
const state = {
  state: 'value'
}

const getters = {
  state: () => state.state
}
const mutations = {
  SET_STATE (state, value) {
  state.state = value
  }
}

const actions = {
  setState ({ commit }, value) {
    commit('SET_STATE', value)
  }
}

export default {
  namespaced: true,
  state,
  getters,
  mutations,
  actions
}
endsnippet
