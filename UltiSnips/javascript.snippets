snippet rnlog "console.log(...)" b
console.log($0)
endsnippet

snippet rntm "timeout" b
setTimeout(() => {
	$0
}, 300)
endsnippet

snippet rnc:mvue "Main Vue File" b
import Vue from 'vue'
import App from './App.vue'
import router from './router'
import store from './store'

import './registerServiceWorker'

// import { api } from './config'

Vue.config.productionTip = false
// Vue.prototype.$api = api // Setting the default communication function

new Vue({
  router,
  store,
  render: h => h(App)
}).$mount('#app')
endsnippet

snippet rnc:router "Router File" b
import Vue from 'vue'
import Router from 'vue-router'
Vue.use(Router)

import $0 from `!p snip.rv = t[1].lower()`

export default new Router({
	mode: 'history',
  base: process.env.NODE_ENV === 'production' ? '/' : '/',
  routes: [
    {
      path: '',
      name: '`!p snip.rv = t[0].lower()`',
      component: $0
    }
  ]
})
endsnippet

snippet rnc:store "Store File" b
import Vue from 'vue'
import Vuex from 'vuex'
Vue.use(Vuex)

const debug = process.env.NODE_ENV !== 'production'
import $0 from './stores/$0' 

export default new Vuex.store({
  strict: debug,
  modules: {
    $0
  }
})
endsnippet


snippet rnc:store:module "Store module" b
const state = {
  state: 'value'
}

const getters = {
  state: () => state.state
}
const mutations = {
  SET_STATE (state, value) {
  state.state = value
  }
}

const actions = {
  setState ({ commit }, value) {
    commit('SET_STATE', value)
  }
}

export default {
  namespaced: true,
  state,
  getters,
  mutations,
  actions
}
endsnippet

snippet rnc:store:nmodule "Store namespaced module" b
const state = {
  state: 'value'
}

const getters = {
  state: () => state.state
}
const mutations = {
  SET_STATE (state, value) {
  state.state = value
  }
}

const actions = {
  setState ({ commit }, value) {
    commit('SET_STATE', value)
  }
}

export default {
  namespaced: true,
  state,
  getters,
  mutations,
  actions
}
endsnippet

snippet rnc:store:class-nmodule "Store namespaced class module" b

const filters = () => {
  return {
    column: {
      key: 'column',
      label: 'Coluna',
      value: 1,
      active: false
    }
  }
}

const state = {
  $1s: [],
	$1Index: 0,
  filters: filters()
}

const getters = {
  $1s: () => state.$1s,
  $1: () => state.$1s.length ? state.$1s[state.$1Index] : null
}
const mutations = {
  SET_$1S (state, $1s) {
  state.$1s = $1s
  },
  SET_$1_INDEX (state, index) {
    state.$1Index = index
  },
}

const actions = {
  set$1Index ({ state, commit }, client) {
    const index = state.$1s.findIndex(c => c.id === $1.id)
    commit('SET_$1_INDEX', index)
  },
  /**
   * Get all clients and return them
   *
   * @returns Array
   */
  index ({ commit }, that) {
    that.$http.get(that.$api({
      target: '$1s'
    }), {
      headers: header()
    }).then(response => {
      // commit('SET_$1_INDEX', 0)
      // commit('SET_$1S', response.data)
      return true
    }).then(status => {
      return status
    }).catch(err => {
      return err
    })
  },
  show ({ commit }, payload) {
    const that = payload[0]
    const id = payload[1]
    that.$http.get(that.$api({
      target: '$1' + id
    }), {
      headers: header()
    }).then(response => {
      // commit('UPDATE_$1', response.data)
      return true
    }).then(status => {
      return status
      // resolve(status)
    }).catch(err => {
      return err
      // reject(err)
    })
  },
  store ({ commit }, payload) {
    const that = payload[0]
    const data = payload[1]

    that.$http.post(that.$api({
      target: '$1'
    }), data, {
      headers: header()
    }).then(response => {
      // commit('SET_$1S', response.data)
      return true
    }).then(status => {
      return status
      // resolve(status)
    }).catch(err => {
      that.$Progress.fail()
      return err
      // reject(err)
    })
  },
  update ({ commit }, payload) {
    const that = payload[0]
    const data = payload[1]

    that.$http.put(that.$api({
      target: '$1'
    }), data, {
      headers: header()
    }).then(response => {
      // commit('UPDATE_$1', response.data)
      return true
    }).then(status => {
      return status
      // resolve(status)
    }).catch(err => {
      that.$Progress.fail()
      return err
      // reject(err)
    })
  },
  delete ({ commit }, that) {
    return that
  },
  search ({ commit }, payload) {
    const that = payload[0]
    const slug = payload[1]

    that.$http.get(that.$api({
      target: '$1/search/' + slug
    }), {
      headers: header()
    }).then(response => {
      // commit('SET_$1_INDEX', 0)
      // commit('SET_$1S', response.data)
      return true
    }).then(status => {
      return status
      // resolve(status)
    }).catch(err => {
      that.$Progress.fail()
      return err
      // reject(err)
    })
  },
  filter ({ state, commit }, that) {
  	const filters = Object.keys(state.filters)
  	let data = {}

  	filters.forEach(f => {
  		if (state.filters[f].active) data[f] = state.filters[f]
  	})

    return new Promise((resolve, reject) => {
      that.$http.post(that.$api({
				target: '$1/filter'
      }), data, {
        headers: header()
      }).then(response => {
        // commit('SET_$1_INDEX', 0)
        // commit('SET_$1S', response.data)
      }).then(status => {
        resolve(status)
      }).catch(err => {
        that.$Progress.fail()
        reject(err)
      })
    })
  }
}

export default {
  namespaced: true,
  state,
  getters,
  mutations,
  actions
}
endsnippet

snippet rni:store:module "Import Store module"
import $1 from './stores/$1'
endsnippet

snippet rnc:debounced:watch "Debounced watch propertie" b
$1: _.debounce(function ($2) {
}, $3)
endsnippet

snippet rnc:debounced:store:computed "Debounced computed propertie" b
$1: {
	get () {
		return this.$store.getters.$2
	},
	set: _.debounce(function ($3) {
	}, $4)
},
endsnippet
